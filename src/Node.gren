effect module Node where { subscription = NodeSub } exposing
    ( Environment
    , Platform(..)
    , getPlatform
    , CpuArchitecture(..)
    , getCpuArchitecture
    , getEnvironmentVariables
    --
    , SimpleProgram
    , defineSimpleProgram
    , endSimpleProgram
    , endSimpleProgramWithCmd
    --
    , Program
    , ProgramConfiguration
    , defineProgram
    , startProgram    
    --
    , exit
    , exitWithCode
    , setExitCode
    --
    , onEmptyEventLoop
    , onSignalInterrupt
    , onSignalTerminate
    )


{-| A NodeJS program is defined like a browser-based Gren program, except that
there is more flexibility regarding how it is initialized.

You can initialize any number of subsystems, like `FileSystem` or `Terminal`, before
initializing your own program with the results of those initializations.

As part of initializing a subsystem, you usually also get access to a value that permits
you to contact said subsystem. Be careful what code you give these permissions to.

## Program

@docs Program, ProgramConfiguration, defineProgram, startProgram

## Simple Program

@docs SimpleProgram, defineSimpleProgram, endSimpleProgram

## Environment information

@docs Environment, getEnvironmentVariables, Platform, getPlatform, CpuArchitecture, getCpuArchitecture

## Exit

@docs exit, exitWithCode, setExitCode

## Subscriptions

@docs onEmptyEventLoop, onSignalInterrupt, onSignalTerminate

-}


import Bytes exposing (Bytes)
import Dict exposing ( Dict )
import Init
import Internal.Init
import Task exposing ( Task )
import Gren.Kernel.Node
import FileSystem.Path exposing (Path)
import Stream
import Platform exposing (ProcessId)
import Process


-- ENVIRONMENT


{-| Contains information about the environment your application was initiated in.

* `platform` and `cpuArchitecture` tells you something about the operating system and machine your application is running on.
* `applicationPath` is the path to the currently executing program.
* `args` is an `Array` of the arguments passed to your application.
* `stdout`, `stderr` and `stdin` are streams you can use to communicate with the outside world. Take a closer look at the `Stream` module for more information.

-}
type alias Environment =
    { platform : Platform
    , cpuArchitecture : CpuArchitecture
    , applicationPath : Path
    , args : Array String
    , stdout : Stream.Writable Bytes
    , stderr : Stream.Writable Bytes
    , stdin : Stream.Readable Bytes
    }


initializeEnvironment : Task Never Environment
initializeEnvironment =
    Gren.Kernel.Node.init
        |> Task.map
                (\raw ->
                    { platform = platformFromString raw.platform
                    , cpuArchitecture = archFromString raw.arch
                    , applicationPath = raw.applicationPath
                    , args = raw.args
                    , stdout = raw.stdout
                    , stderr = raw.stderr
                    , stdin = raw.stdin
                    }
                )


{-| The platform, or operating system, that your application is running on.
-}
type Platform
    = Win32
    | Darwin
    | Linux
    | FreeBSD
    | OpenBSD
    | SunOS
    | Aix
    | UnknownPlatform String


{-| Retrieve the platform of the computer running the application.
-}
getPlatform : Task x Platform
getPlatform =
    Gren.Kernel.Node.getPlatform
        |> Task.map platformFromString


platformFromString : String -> Platform
platformFromString platform =
    when String.toLower platform is
        "win32" ->
            Win32

        "darwin" ->
            Darwin

        "linux" ->
            Linux

        "freebsd" ->
            FreeBSD

        "openbsd" ->
            OpenBSD

        "sunos" ->
            SunOS

        "aix" ->
            Aix

        _ ->
            UnknownPlatform platform


{-| The CPU architecture your application is running on.
-}
type CpuArchitecture
    = Arm
    | Arm64
    | IA32
    | Mips
    | Mipsel
    | PPC
    | PPC64
    | S390
    | S390x
    | X64
    | UnknownArchitecture String


{-| Retrieve the CPU architecture of the computer running the application.
-}
getCpuArchitecture : Task x CpuArchitecture
getCpuArchitecture =
    Gren.Kernel.Node.getCpuArchitecture
        |> Task.map archFromString


archFromString : String -> CpuArchitecture
archFromString arch =
    when String.toLower arch is
        "arm" ->
            Arm

        "arm64" ->
            Arm64

        "ia32" ->
            IA32

        "mips" ->
            Mips

        "mipsel" ->
            Mipsel

        "ppc" ->
            PPC

        "ppc64" ->
            PPC64

        "s390" ->
            S390

        "s390x" ->
            S390x

        "x64" ->
            X64

        _ ->
            UnknownArchitecture arch


{-| Get a `Dict` of environment variables.
-}
getEnvironmentVariables : Task x (Dict String String)
getEnvironmentVariables =
    Gren.Kernel.Node.getEnvironmentVariables


-- PROGRAMS


{-| A program that executes a single task and then exits.
-}
type alias SimpleProgram msg =
    Platform.Program {} {} msg


{-| The definition of a Gren program that runs on NodeJS.
-}
type alias Program model msg =
    Platform.Program {} (Model model) (Msg model msg)


-- TOP LEVEL PROGRAM


type Model model
    = Uninitialized
    | Initialized model


type Msg model msg
    = InitDone { model : model, command : Cmd msg }
    | MsgReceived msg


{-| The required functions that define a program.
-}
type alias ProgramConfiguration model msg =
    { init : Environment -> Init.Task { model : model, command : Cmd msg }
    , update : msg -> model -> { model : model, command : Cmd msg }
    , subscriptions : model -> Sub msg
    }


{-| Define a program with access to long-lived state and the ability to respond to
messages and listen to subscriptions. If you want to define a simple and short-lived
program, chances are you're looking for [defineSimpleProgram](#defineSimpleProgram) instead.
-}
defineProgram : ProgramConfiguration model msg -> Program model msg
defineProgram config =
    Platform.worker
        { init = initProgram config.init
        , update = update config.update
        , subscriptions = subscriptions config.subscriptions
        }


initProgram
    : (Environment -> Init.Task { model : model, command : Cmd msg })
    -> {}
    -> { model : Model model, command : Cmd (Msg model msg) }
initProgram initTask {} =
    { model = Uninitialized
    , command = 
        initializeEnvironment
            |> Task.andThen (\env -> unwrap <| initTask env)
            |> Task.perform InitDone
    }


unwrap : Internal.Init.Task a -> Task Never a
unwrap (Internal.Init.Task task) =
    task


update
    : (msg -> model -> { model : model, command : Cmd msg })
    -> Msg model msg
    -> Model model
    -> { model : Model model, command : Cmd (Msg model msg) }
update appUpdate msg model =
    when model is
        Uninitialized ->
            when msg is
                InitDone initResult ->
                    { model = Initialized initResult.model
                    , command = Cmd.map MsgReceived initResult.command
                    }

                MsgReceived _ ->
                    -- Ignore
                    { model = model, command = Cmd.none }

        Initialized appModel ->
            when msg is
                InitDone _ ->
                    -- Ignore
                    { model = model, command = Cmd.none }

                MsgReceived appMsg ->
                    let
                        updateResult =
                            appUpdate appMsg appModel
                    in
                    { model = Initialized updateResult.model
                    , command = Cmd.map MsgReceived updateResult.command
                    }


subscriptions
    : (model -> Sub msg)
    -> (Model model)
    -> Sub (Msg model msg)
subscriptions appSubs model =
    when model is
        Uninitialized ->
            Sub.none

        Initialized appModel ->
            Sub.map MsgReceived (appSubs appModel)


{-| This lets the runtime know that you're done initializing other subsystems,
and that your program is ready to start.
-}
startProgram : { model : model, command : Cmd cmd } -> Init.Task { model : model, command : Cmd cmd }
startProgram initResult =
    Internal.Init.Task (Task.succeed initResult)


{-| Define a simple program that doesn't require long-lived state or the ability to respond
to messages or subscriptions. Ideal for simple and short-lived programs.
-}
defineSimpleProgram : (Environment -> Init.Task (Cmd a)) -> SimpleProgram a
defineSimpleProgram initTask =
    Platform.worker
        { init = \_ ->
            { model = {}
            , command =
                initializeEnvironment
                    |> Task.andThen (\env -> unwrap <| initTask env)
                    |> Task.executeCmd
            }
        , update = (\_ _ -> { model = {}, command = Cmd.none })
        , subscriptions = (\_ -> Sub.none)
        }


{-| When defining a program with [defineSimpleProgram](#defineSimpleProgram), use this function to define the
final command to execute.
-}
endSimpleProgram : Task Never x -> Init.Task (Cmd a)
endSimpleProgram finalTask =
    Internal.Init.Task (Task.succeed <| Task.execute finalTask)


{-| Similar to [endSimpleProgram](#endSimpleProgram), but takes a `Cmd` instead of a `Task`.
-}
endSimpleProgramWithCmd : Cmd a -> Init.Task (Cmd a)
endSimpleProgramWithCmd cmd =
    Internal.Init.Task (Task.succeed cmd)


-- EXIT


{-| Terminate the program immediatly. It will not wait for tasks like http calls
or file system writes to complete.

This function is equivalent to:

    exitWithCode 0
-}
exit : Cmd msg
exit =
    exitWithCode 0


{-| Terminate the program immediatly. It will not wait for tasks like http calls
or file system writes, so only use this if you've reached a state where it makes
no sense to continue.

The exit code can be read by other processes on your system. Any value other than
0 is considered an error, but there are no other formal requirements for what
makes an exit code. If all you want is to signalize that your application exited
due to an error, -1 is a good option.
-}
exitWithCode : Int -> Cmd msg
exitWithCode code =
    Gren.Kernel.Node.exitWithCode code


{-| Set the error code that the program will return once it finishes.

Note: This will not terminate your program, so things like http calls
or writes to the filesystem will be allowed to complete. However,
the program will only exit once there are no ongoing tasks.
-}
setExitCode : Int -> Task x {}
setExitCode code =
    Gren.Kernel.Node.setExitCode code


-- SUBSCRIPTIONS


type NodeSub msg
    = OnEmptyEventLoop msg
    | OnSignalInterrupt msg
    | OnSignalTerminate msg


subMap : (a -> b) -> NodeSub a -> NodeSub b
subMap mapFn sub =
    when sub is
        OnEmptyEventLoop msg ->
            OnEmptyEventLoop (mapFn msg)

        OnSignalInterrupt msg ->
            OnSignalInterrupt (mapFn msg)

        OnSignalTerminate msg ->
            OnSignalTerminate (mapFn msg)


{-| -}
onEmptyEventLoop : msg -> Sub msg
onEmptyEventLoop msg =
    subscription (OnEmptyEventLoop msg)


{-| -}
onSignalInterrupt : msg -> Sub msg
onSignalInterrupt msg =
    subscription (OnSignalInterrupt msg)


{-| -}
onSignalTerminate : msg -> Sub msg
onSignalTerminate msg =
    subscription (OnSignalTerminate msg)


-- LOOP


type alias State msg =
    { emptyEventLoop : Array msg
    , emptyEventLoopListener : Maybe ProcessId
    , signalInterrupt : Array msg
    , signalInterruptListener : Maybe ProcessId
    , signalTerminate : Array msg
    , signalTerminateListener : Maybe ProcessId
    }


init : Task Never (State msg)
init =
    Task.succeed
        { emptyEventLoop = []
        , emptyEventLoopListener = Nothing
        , signalInterrupt = []
        , signalInterruptListener = Nothing
        , signalTerminate = []
        , signalTerminateListener = Nothing
        }


onEffects
    : Platform.Router msg Event
    -> Array (NodeSub msg)
    -> State msg
    -> Task Never (State msg)
onEffects router subs state =
    let
        newSubs =
            Array.foldl
                categorizeSubs
                { emptyEventLoop = []
                , signalInterrupt = []
                , signalTerminate = []
                }
                subs

        categorizeSubs sub acc =
            when sub is
                OnEmptyEventLoop msg ->
                    { acc | emptyEventLoop = Array.pushLast msg acc.emptyEventLoop }

                OnSignalInterrupt msg ->
                    { acc | signalInterrupt = Array.pushLast msg acc.signalInterrupt }

                OnSignalTerminate msg ->
                    { acc | signalTerminate = Array.pushLast msg acc.signalTerminate }

        emptyEventLoopListenerTask =
            if Array.length newSubs.emptyEventLoop > 0 then
              when state.emptyEventLoopListener is
                  Just pid ->
                      Task.succeed (Just pid)

                  Nothing ->
                      Gren.Kernel.Node.attachEmptyEventLoopListener (Platform.sendToSelf router NotifyEmptyEventLoop)
                          |> Process.spawn
                          |> Task.map Just
            else
                when state.emptyEventLoopListener is
                    Just pid ->
                        Process.kill pid
                            |> Task.map (\_ -> Nothing)

                    Nothing ->
                        Task.succeed Nothing

        signalInterruptListenerTask =
            if Array.length newSubs.signalInterrupt > 0 then
              when state.signalInterruptListener is
                  Just pid ->
                      Task.succeed (Just pid)

                  Nothing ->
                      Gren.Kernel.Node.attachSignalInterruptListener (Platform.sendToSelf router NotifySignalInterrupt)
                          |> Process.spawn
                          |> Task.map Just
            else
                when state.signalInterruptListener is
                    Just pid ->
                        Process.kill pid
                            |> Task.map (\_ -> Nothing)

                    Nothing ->
                        Task.succeed Nothing

        signalTerminateListenerTask =
            if Array.length newSubs.signalTerminate > 0 then
              when state.signalTerminateListener is
                  Just pid ->
                      Task.succeed (Just pid)

                  Nothing ->
                      Gren.Kernel.Node.attachSignalTerminateListener (Platform.sendToSelf router NotifySignalTerminate)
                          |> Process.spawn
                          |> Task.map Just
            else
                when state.signalTerminateListener is
                    Just pid ->
                        Process.kill pid
                            |> Task.map (\_ -> Nothing)

                    Nothing ->
                        Task.succeed Nothing
    in
    Task.map3
        (\emptyEventLoopListener signalInterruptListener signalTerminateListener ->
            { emptyEventLoop = newSubs.emptyEventLoop
            , emptyEventLoopListener = emptyEventLoopListener
            , signalInterrupt = newSubs.signalInterrupt
            , signalInterruptListener = signalInterruptListener
            , signalTerminate = newSubs.signalTerminate
            , signalTerminateListener = signalTerminateListener
            }
        )
        emptyEventLoopListenerTask
        signalInterruptListenerTask
        signalTerminateListenerTask


type Event
    = NotifyEmptyEventLoop
    | NotifySignalInterrupt
    | NotifySignalTerminate


onSelfMsg : Platform.Router msg Event -> Event -> State msg -> Task Never (State msg)
onSelfMsg router event state =
    when event is
        NotifyEmptyEventLoop ->
            Array.foldl
                (\msg task -> Task.andThen (\_ -> Platform.sendToApp router msg) task)
                (Task.succeed {})
                state.emptyEventLoop
                |> Task.map (\_ -> state)

        NotifySignalInterrupt ->
            Array.foldl
                (\msg task -> Task.andThen (\_ -> Platform.sendToApp router msg) task)
                (Task.succeed {})
                state.signalInterrupt
                |> Task.map (\_ -> state)

        NotifySignalTerminate ->
            Array.foldl
                (\msg task -> Task.andThen (\_ -> Platform.sendToApp router msg) task)
                (Task.succeed {})
                state.signalTerminate
                |> Task.map (\_ -> state)
