effect module ChildProcess where { command = MyCmd } exposing 
    ( Permission
    , initialize
    --
    , RunOptions
    , defaultRunOptions
    , Shell(..)
    , WorkingDirectory(..)
    , EnvironmentVariables(..)
    , RunDuration(..)
    --
    , FailedRun
    , SuccessfulRun
    , run
    --
    , SpawnOptions
    , StreamIO
    , Connection(..)
    , defaultSpawnOptions
    , spawn
    )


{-| A running program is a process. A process spawned from another process is known as a child process.

This module allow you to spawn child processes.

## Initialization

@docs Permission, initialize

## Running processes

@docs RunOptions, defaultRunOptions, Shell, WorkingDirectory, EnvironmentVariables, RunDuration
@docs FailedRun, SuccessfulRun, run

## Spawning processes

@docs SpawnOptions, StreamIO, Connection, defaultSpawnOptions, spawn
-}


import Gren.Kernel.ChildProcess
import Bytes exposing (Bytes)
import Dict exposing (Dict)
import Task exposing (Task)
import Init
import Internal.Init
import Process
import Stream


{-| This value represents the permission to spawn child processes.

Only code you trust should have access to this value.
-}
type Permission
    = Permission


{-| Initialize the `ChildProcess` subsystem, which gains you the permission to
spawn child processes.
-}
initialize : Init.Task Permission
initialize =
    Task.succeed Permission
        |> Internal.Init.Task


-- OPTIONS


{-| Options to customize the execution of a child process created with [run](#run).

* `shell` is the shell to run the process in (if any)
* `workingDirectory` specifies the working directory of the process
* `environmentVariables` specifies the environment variables the process has access to
* `maximumBytesWrittenToStreams` specifies an upper bound of bytes that can be returned from the process
* `runDuration` specifies a maximum amount of time a process is allowed to run before exiting
-}
type alias RunOptions =
    { shell : Shell
    , workingDirectory : WorkingDirectory
    , environmentVariables : EnvironmentVariables
    , maximumBytesWrittenToStreams : Int
    , runDuration : RunDuration
    }


{-| A nice default set of options for the [run](#run) function
-}
defaultRunOptions : RunOptions
defaultRunOptions =
    { shell = DefaultShell
    , workingDirectory = InheritWorkingDirectory
    , environmentVariables = InheritEnvironmentVariables
    , maximumBytesWrittenToStreams = 1024 * 1024 -- 1Mb
    , runDuration = NoLimit
    }


{-| Which shell should the child process run in?

* `NoShell` executes the process directly, without any shell. A little bit more efficient, but you lose some convinience as shell behaviour (like glob patterns) isn't available for arguments
* `DefaultShell` executes the process in the default shell for the currently running system
* `CustomShell` executes the process in the specified shell.
-}
type Shell
    = NoShell
    | DefaultShell
    | CustomShell String


{-| What should be the working directory of the process?

* `InheritWorkingDirectory` inherits the working directory from its parent
* `SetWorkingDirectory` sets the working directory to the specified value (doesn't affect parent)
-}
type WorkingDirectory
    = InheritWorkingDirectory
    | SetWorkingDirectory String


{-| What should be the environment variables of the process?

* `InheritEnvironmentVariables` inherits the environment variables from its parent
* `MergeWithEnvironmentVariables` inherits the environment variables from its parent, with the specified modifications
* `ReplaceEnvironmentVariables` sets the environment variables to the specified dictionary
-}
type EnvironmentVariables
    = InheritEnvironmentVariables
    | MergeWithEnvironmentVariables (Dict String String)
    | ReplaceEnvironmentVariables (Dict String String)


{-| How long is the process allowed to run before it's forcefully terminated?

* `NoLimit` means it can run forever
* `Milliseconds` sets the limit to the specified number of milliseconds
-}
type RunDuration
    = NoLimit
    | Milliseconds Int


-- RUN


{-| Return value when a process terminates due to an error

The exit code provides some hint of what went wrong, but what it means depends on the program which was run.
-}
type alias FailedRun =
    { exitCode: Int
    , stdout : Bytes
    , stderr : Bytes
    }


{-| Return value when a process terminates without error
-}
type alias SuccessfulRun =
    { stdout : Bytes
    , stderr : Bytes
    }


{-| Execute a process with a given name, arguments and options, and wait for it to terminate.

    run permission "cat" [ "my_file" ] defaultRunOptions

-}
run : Permission -> String -> Array String -> RunOptions -> Task FailedRun SuccessfulRun
run _ program arguments opts =
    Gren.Kernel.ChildProcess.run
        { program = program
        , arguments = arguments
        , shell =
            when opts.shell is
                NoShell ->
                    { choice = 0
                    , value = ""
                    }

                DefaultShell ->
                    { choice = 1
                    , value = ""
                    }

                CustomShell value ->
                    { choice = 2
                    , value = value
                    }
        , workingDirectory =
             when opts.workingDirectory is
                 InheritWorkingDirectory -> 
                    { inherit = True
                    , override = ""
                    }

                 SetWorkingDirectory value ->
                    { inherit = False
                    , override = value
                    }
        , environmentVariables =
            when opts.environmentVariables is
                InheritEnvironmentVariables -> 
                    { option = 0
                    , value = Dict.empty
                    }
                
                MergeWithEnvironmentVariables value ->
                    { option = 1
                    , value = value
                    }

                ReplaceEnvironmentVariables value ->
                    { option = 2
                    , value = value
                    }
        , maximumBytesWrittenToStreams = opts.maximumBytesWrittenToStreams
        , runDuration =
            when opts.runDuration is
                NoLimit ->
                    0

                Milliseconds ms -> 
                    max 0 ms
        }


-- SPAWN


{-| Options to customize the execution of a child process created with [spawn](#spawn).

* `shell` is the shell to run the process in (if any)
* `workingDirectory` specifies the working directory of the process
* `environmentVariables` specifies the environment variables the process has access to
* `runDuration` specifies a maximum amount of time a process is allowed to run before exiting
* `connection` let's you specify how the new process is connected to the application, 
and which message to receive when the process starts
* `onExit` is the message that is triggered when the process exits. The message receives the exit code.
-}
type alias SpawnOptions msg =
    { shell : Shell
    , workingDirectory : WorkingDirectory
    , environmentVariables : EnvironmentVariables
    , runDuration : RunDuration
    , connection : Connection msg
    , onExit : Int -> msg
    }


{-| Record expected by spawn kernel call.
-}
type alias KernelSpawnConfig msg =
    { program : String
    , arguments : Array String
    , shell : 
        { choice : Int
        , value : String 
        }
    , workingDirectory : 
        { inherit : Bool
        , override : String
        }
    , environmentVariables :
        { option : Int
        , value : Dict String String
        }
    , runDuration : Int
    , connection :
        { kind : Int
        , onInit : { processId : Process.Id, streams : StreamIO } -> msg
        }
    , onExit : Int -> msg
    }


{-| Streams that can be used to communicate with a spawned child process.
-}
type alias StreamIO =
    { input : Stream.Writable Bytes
    , output : Stream.Readable Bytes
    , error : Stream.Readable Bytes
    }


{-| What relation should the newly spawned process have with the running application?

* `Integrated` means that the spawned process shares the stdin, stdout and stderr streams.
* `External` means that a new streams are created for stdin, stdout and stderr and passed to the application, which can use those streams for communicating with the new process.
* `Ignored` means the same as `External`, but anything written to stdin, stdout and stderr is discarded/ignored.
* `Detached` means the same as `Ignored`, but that the application will exit even if the child process hasn't finished executing.
-}
type Connection msg
    = Integrated (Process.Id -> msg)
    | External ({ processId : Process.Id, streams : StreamIO } -> msg)
    | Ignored (Process.Id -> msg)
    | Detached (Process.Id -> msg)


{-| A nice default set of options for the [spawn](#spawn) function.
-}
defaultSpawnOptions : Connection msg -> (Int -> msg) -> SpawnOptions msg
defaultSpawnOptions connection onExit =
    { shell = DefaultShell
    , workingDirectory = InheritWorkingDirectory
    , environmentVariables = InheritEnvironmentVariables
    , runDuration = NoLimit
    , connection = connection
    , onExit = onExit
    }


{-| Spawn a process with a given name, arguments and options, and let it run in the background.
This is mostly helpful for starting long-running processes.

    spawn permission "tail" [ "my_file" ] mySpawnOptions

-}
spawn : Permission -> String -> Array String -> SpawnOptions msg -> Cmd msg
spawn _ program arguments opts =
    command <| Spawn <| kernelSpawnConfig program arguments opts


kernelSpawnConfig : String -> Array String -> SpawnOptions msg -> KernelSpawnConfig msg
kernelSpawnConfig program arguments opts =
    { program = program
    , arguments = arguments
    , shell =
        when opts.shell is
            NoShell ->
                { choice = 0
                , value = ""
                }

            DefaultShell ->
                { choice = 1
                , value = ""
                }

            CustomShell value ->
                { choice = 2
                , value = value
                }
    , workingDirectory =
         when opts.workingDirectory is
             InheritWorkingDirectory -> 
                { inherit = True
                , override = ""
                }

             SetWorkingDirectory value ->
                { inherit = False
                , override = value
                }
    , environmentVariables =
        when opts.environmentVariables is
            InheritEnvironmentVariables -> 
                { option = 0
                , value = Dict.empty
                }
        
            MergeWithEnvironmentVariables value ->
                { option = 1
                , value = value
                }

            ReplaceEnvironmentVariables value ->
                { option = 2
                , value = value
                }
    , runDuration =
        when opts.runDuration is
            NoLimit ->
                0

            Milliseconds ms -> 
                max 0 ms
    , connection =
        when opts.connection is
            Integrated toMsg ->
                { kind = 0
                , onInit = (\{ processId } -> toMsg processId)
                }

            External toMsg ->
                { kind = 1
                , onInit = toMsg
                }
            
            Ignored toMsg ->
                { kind = 2
                , onInit = (\{ processId } -> toMsg processId)
                }

            Detached toMsg ->
                { kind = 3
                , onInit = (\{ processId } -> toMsg processId)
                }
    , onExit = opts.onExit
    }


mapKernelSpawnConfig : (msg -> msg2) -> KernelSpawnConfig msg -> KernelSpawnConfig msg2
mapKernelSpawnConfig mapper config =
    { program = config.program
    , arguments = config.arguments
    , shell = config.shell
    , workingDirectory = config.workingDirectory
    , environmentVariables = config.environmentVariables
    , runDuration = config.runDuration
    , connection =
        { kind = config.connection.kind
        , onInit = mapper << config.connection.onInit
        }
    , onExit = mapper << config.onExit
    }

-- COMMANDS


type MyCmd msg
    = Spawn (KernelSpawnConfig msg)


cmdMap : (a -> b) -> MyCmd a -> MyCmd b
cmdMap func cmd =
    when cmd is
        Spawn config ->
            Spawn <| mapKernelSpawnConfig func config


init : Task Never {}
init =
    Task.succeed {}


onEffects : Platform.Router msg Never -> Array (MyCmd msg) -> {} -> Task Never {}
onEffects router commands state =
  when Array.popFirst commands is
    Nothing ->
      Task.succeed state

    Just { first, rest } ->
        when first is
            Spawn config ->
                Gren.Kernel.ChildProcess.spawn
                    (Platform.sendToApp router << config.connection.onInit)
                    (Platform.sendToApp router << config.onExit)
                    config
                        |> Process.spawn
                        |> Task.andThen 
                            (\_ -> onEffects router rest {})


onSelfMsg : Platform.Router msg Never -> Never -> {} -> Task Never {}
onSelfMsg _ _ _ =
    Task.succeed {}
