effect module FileSystem where { subscription = FileSystemSub } exposing
    ( Permission
    , initialize
    -- Errors
    , Error
    , errorPath
    , errorCode
    , errorToString
    , errorIsPermissionDenied
    , errorIsFileExists
    , errorIsDirectoryFound
    , errorIsTooManyOpenFiles
    , errorIsNoSuchFileOrDirectory
    , errorIsNotADirectory
    , errorIsDirectoryNotEmpty
    , errorIsNotPermitted
    , errorIsLinkLoop
    , errorIsPathTooLong
    , errorIsInvalidInput
    , errorIsIO
    -- Metadata
    , Metadata
    , EntityType(..)
    , metadata
    , AccessPermission(..)
    , checkAccess
    , changeAccess
    , accessPermissionsToInt
    , changeOwner
    , changeTimes
    , move
    , realPath
    -- Files
    , appendToFile
    , copyFile
    , readFile
    , ReadFileStreamMode (..)
    , readFileStream
    , writeFile
    , WriteFileStreamMode (..)
    , writeFileStream
    , truncateFile
    , remove
    -- Directories
    , listDirectory
    , makeDirectory
    , makeTempDirectory
    -- Links
    , hardLink
    , softLink
    , readLink
    , unlink
    -- Watch
    , WatchEvent(..)
    , watch
    , watchRecursive
    --
    , homeDirectory
    , currentWorkingDirectory
    , tmpDirectory
    , devNull
    )


{-| This module provides access to the file system. It allows you to read and write files, create directories and links etc.

@docs Permission, initialize

## Metadata

@docs Metadata, EntityType, metadata, AccessPermission, checkAccess, changeAccess, accessPermissionsToInt, changeOwner, changeTimes, move, realPath

## Files

@docs copyFile, appendToFile, readFile, ReadFileStreamMode, readFileStream, writeFile, WriteFileStreamMode, writeFileStream, truncateFile, remove

## Directories

@docs listDirectory, makeDirectory, makeTempDirectory 

## Links

@docs hardLink, softLink, readLink, unlink

## Watch for changes

@docs WatchEvent, watch, watchRecursive

## Special paths

@docs homeDirectory, currentWorkingDirectory, tmpDirectory, devNull

## Errors

@docs Error, errorPath, errorCode, errorToString
@docs errorIsPermissionDenied, errorIsFileExists, errorIsDirectoryFound, errorIsTooManyOpenFiles, errorIsNoSuchFileOrDirectory, errorIsNotADirectory, errorIsDirectoryNotEmpty, errorIsNotPermitted, errorIsLinkLoop, errorIsPathTooLong, errorIsInvalidInput, errorIsIO

-}


import Gren.Kernel.FileSystem
import Gren.Kernel.FilePath
import Bytes exposing (Bytes)
import Dict exposing (Dict)
import Task exposing (Task)
import FileSystem.Path exposing (Path)
import Init
import Internal.Init
import Time
import Process
import Stream


{-| This value represents the permission to perform file system operations.

Only code you trust should have access to this value.
-}
type Permission
    = Permission


{-| Initialize the `FileSystem` subsystem, which gains you the permission to perform
file system operations.
-}
initialize : Init.Task Permission
initialize =
    Task.succeed Permission
        |> Internal.Init.Task


-- ERRORS


{-| Represents an error that occured when working with the file system.

There are many different kinds of error depending on which operation you're performing and which
operating system you're performing it on. To figure out which error it is, you'll need
to use one of the helper functions below, or check the specific error code.
-}
type Error
    = Error
        { path : Path
        , code : String
        , message : String
        }


{-| The path where the error occured.
-}
errorPath : Error -> Path
errorPath (Error { path }) =
    path


{-| A string that identifies a specific kind of error. There can be several error codes for the
same kind of error, depending on the operating system that is in use.
-}
errorCode : Error -> String
errorCode (Error { code }) =
    code


{-| Returns a human readable description of the error.
-}
errorToString : Error -> String
errorToString (Error { message }) =
    message


{-| If `True`, the error occured because you don't have the correct access permission to perform
the operation.
-}
errorIsPermissionDenied : Error -> Bool
errorIsPermissionDenied (Error { code }) =
    code == "EACCES"


{-| If `True`, a file exists when it was expected not to.
-}
errorIsFileExists : Error -> Bool
errorIsFileExists (Error { code }) =
    code == "EEXIST"


{-| If `True`, a file operation was attempted on a directory.
-}
errorIsDirectoryFound : Error -> Bool
errorIsDirectoryFound (Error { code }) =
    code == "EISDIR"


{-| If `True`, the application has too many open files.
-}
errorIsTooManyOpenFiles : Error -> Bool
errorIsTooManyOpenFiles (Error { code }) =
    code == "EMFILE"


{-| If `True`, the code was passed a [Path](FileSystem.Path#Path) which points to a file or directory
that doesn't exist.
-}
errorIsNoSuchFileOrDirectory : Error -> Bool
errorIsNoSuchFileOrDirectory (Error { code }) =
    code == "ENOENT"


{-| If `True`, a directory was expected but it found a file or some other entity.
-}
errorIsNotADirectory : Error -> Bool
errorIsNotADirectory (Error { code }) =
    code == "ENOTDIR"


{-| If `True`, the operation expected an empty directory, but the directory is not empty.
-}
errorIsDirectoryNotEmpty : Error -> Bool
errorIsDirectoryNotEmpty (Error { code }) =
    code == "ENOTEMPTY"


{-| If `True`, the operation was rejected because of missing privileges.
-}
errorIsNotPermitted : Error -> Bool
errorIsNotPermitted (Error { code }) =
    code == "EPERM"


{-| If `True`, we seem to be stuck in a loop following link after link after...
-}
errorIsLinkLoop : Error -> Bool
errorIsLinkLoop (Error { code }) =
    code == "ELOOP"


{-| If `True`, the [Path](FileSystem.Path#Path) is too long.
-}
errorIsPathTooLong : Error -> Bool
errorIsPathTooLong (Error { code }) =
    code == "ENAMETOOLONG"


{-| If `True`, the arguments passed to the function is invalid somehow.
-}
errorIsInvalidInput : Error -> Bool
errorIsInvalidInput (Error { code }) =
    code == "EINVAL"


{-| If `True`, the operation failed due to an IO error. This could be that the disk is
busy, or even corrupt.
-}
errorIsIO : Error -> Bool
errorIsIO (Error { code }) =
    code == "EIO"


-- METADATA


{-| Represents extra information about an entity in the file system.
-}
type alias Metadata =
    { entityType : EntityType
    , deviceID : Int
    , userID : Int
    , groupID : Int
    , byteSize : Int
    , blockSize : Int
    , blocks : Int
    , lastAccessed : Time.Posix
    , lastModified : Time.Posix
    , lastChanged : Time.Posix
    , created : Time.Posix
    }


{-| The type of an entity in the file system.
-}
type EntityType
    = File
    | Directory
    | Socket
    | Symlink
    | Device
    | Pipe


{-| Return metadata for the entity represented by [Path](FileSystem.Path#Path).

If `resolveLink` is `False`, you will receive metadata for the link itself, not the entity
pointed at by the link.
-}
metadata : Permission -> { resolveLink : Bool } -> Path -> Task Error Metadata
metadata _ { resolveLink } path =
    if resolveLink then
        Gren.Kernel.FileSystem.stat path

    else
        Gren.Kernel.FileSystem.lstat path


{-| Represents the permission to access an entity for a specific operation.

For example: if you, or your group, doesn't have the `Read` permission for a file,
you're not allowed to read from it.
-}
type AccessPermission
    = Read
    | Write
    | Execute


{-| Check if the user running this application has the given access permissions for the
entity represented by [Path](FileSystem.Path#Path).

Passing an empty `Array` will check that the entity exists.
-}
checkAccess : Permission -> Array AccessPermission -> Path -> Task Error Path
checkAccess _ permissions path =
    Gren.Kernel.FileSystem.access permissions path


{-| Change the access permissions for the entity's owner, group and everyone else.
-}
changeAccess 
    : Permission
    -> { owner : Array AccessPermission 
       , group : Array AccessPermission
       , others : Array AccessPermission
       }
    -> Path
    -> Task Error Path
changeAccess _ permissions path =
    let
        mode =
            (String.fromInt <| accessPermissionsToInt permissions.owner)
            ++ (String.fromInt <| accessPermissionsToInt permissions.group)
            ++ (String.fromInt <| accessPermissionsToInt permissions.others)
    in
    Gren.Kernel.FileSystem.chmod mode path


{-| The integer representation of a set of access permissions in a posix system.

    accessPermissionsToInt [ Read, Write ] == 6
-}
accessPermissionsToInt : Array AccessPermission -> Int
accessPermissionsToInt values =
    let
        numberFor num a =
            if Array.member a values then
                num

            else
                0
    in
    numberFor 4 Read + numberFor 2 Write + numberFor 1 Execute


{-| Change the user and group that owns a file.

You'll need the ID of the owner and group to perform this operation.

If `resolveLink` is `False`, you're changing the owner of the link itself,
not the entity it points to.
-}
changeOwner : Permission -> { userID : Int, groupID : Int, resolveLink : Bool } -> Path -> Task Error Path
changeOwner _ options path =
    if options.resolveLink then
        Gren.Kernel.FileSystem.chown options path

    else
        Gren.Kernel.FileSystem.lchown options path


{-| Change the registered time (down to the second) an entity was accessed and modified.

If `resolveLink` is `False`, you're changing the last access and modification time of the link itself,
not the entity it points to.
-}
changeTimes : Permission -> { lastAccessed : Time.Posix, lastModified : Time.Posix, resolveLink : Bool } -> Path -> Task Error Path
changeTimes _ { lastAccessed, lastModified, resolveLink } path =
    let
        lastAccessedSeconds = 
            Time.posixToMillis lastAccessed // 1000
        
        lastModifiedSeconds = 
            Time.posixToMillis lastModified // 1000
    in
    if resolveLink then
        Gren.Kernel.FileSystem.utimes lastAccessedSeconds lastModifiedSeconds path

    else
        Gren.Kernel.FileSystem.lutimes lastAccessedSeconds lastModifiedSeconds path


{-| Move the entity represented by the last [Path](FileSystem.Path#Path), to the location
represented by the first [Path](FileSystem.Path#Path). This can also be used to rename an
entity.
-}
move : Permission -> Path -> Path -> Task Error Path
move _ new old =
    Gren.Kernel.FileSystem.rename old new


{-| If you have a [Path](FileSystem.Path#Path) that is relative to the current directory,
or points at a link, you can use this find the true [Path](FileSystem.Path#Path) of the
entity.
-}
realPath : Permission -> Path -> Task Error Path
realPath _ path =
    Gren.Kernel.FileSystem.realpath path


-- FILES


{-| Add `Bytes` to the end of a file.
-}
appendToFile : Permission -> Bytes -> Path -> Task Error Path
appendToFile _ bytes path =
    Gren.Kernel.FileSystem.appendFile bytes path


{-| Copy the file represented by the last [Path](FileSystem.Path#Path), to the location
represented by the first [Path](FileSystem.Path#Path).
-}
copyFile : Permission -> Path -> Path -> Task Error Path
copyFile _ dest src =
    Gren.Kernel.FileSystem.copyFile src dest


{-| Read the entire contents of a file.

Note: This will return the entire contents of a file at once. For very large
files this might cause you to run out of memory. In those cases you might want
to use [readFileStream](#readFileStream) instead.
-}
readFile : Permission -> Path -> Task Error Bytes
readFile _ path =
    Gren.Kernel.FileSystem.readFile path


{-| Specify where in a file you'll start streaming data from.

* `Beginning` reads ethe entire file
* `From` skips the associated number of bytes, then streams the rest of the file
* `Between` reads just the bytes between `start` and `end`, both of which are offsets from the beginning of the file.
-}
type ReadFileStreamMode
    = Beginning
    | From Int
    | Between { start : Int, end : Int }


{-| Read the contents of a file as a stream.
-}
readFileStream : Permission -> ReadFileStreamMode -> Path -> Task Error (Stream.Readable Bytes)
readFileStream _ position path =
    let
        range =
            when position is
                Beginning ->
                    { start = 0, end = -1 }

                From start ->
                    { start = start, end = -1 }

                Between r ->
                    r
    in
    Gren.Kernel.FileSystem.readFileStream range path


{-| Write the given `Bytes` into a file. The file will be created if it doesn't exist,
and overwritten if it does.
-}
writeFile : Permission -> Bytes -> Path -> Task Error Path
writeFile _ bytes path =
    Gren.Kernel.FileSystem.writeFile bytes path


{-| Specify how the streamed bytes will be entered into the file.

* `Replace` will delete all existing bytes in the file and add new bytes from the beginning.
* `ReplaceFrom` will keep the associated number of bytes already in the file, but replace everything after with the streamed data.
* `Append` will keep the contents of the file untouched, and add new data at the end.
-}
type WriteFileStreamMode
    = Replace
    | ReplaceFrom Int
    | Append


{-| Create a writable stream backed by a file.
-}
writeFileStream : Permission -> WriteFileStreamMode -> Path -> Task Error (Stream.Writable Bytes)
writeFileStream _ behaviour path =
    let
        pos =
            when behaviour is
                Replace ->
                    0

                ReplaceFrom num ->
                    num

                Append ->
                    -1
    in
    Gren.Kernel.FileSystem.writeFileStream pos path


{-| Make sure the given file is of a specific length. If the file is smaller than
the given length, zeroes is added to the file until it is the correct length. If the file
is larger than the given length, the excess bytes are removed.
-}
truncateFile : Permission -> Int -> Path -> Task Error Path
truncateFile _ length path =
    Gren.Kernel.FileSystem.truncate length path


{-| Remove the file or directory at the given path.

* `recursive` will delete a directory and everything in it.
-}
remove : Permission -> { recursive : Bool } -> Path -> Task Error Path
remove _ options path =
    Gren.Kernel.FileSystem.remove options path


-- DIRECTORIES


{-| List the contents of a directory. The returned [Paths](FileSystem.Path#Path) are relative to
the directory being listed.
-}
listDirectory : Permission -> Path -> Task Error (Array { path : Path, entityType : EntityType })
listDirectory _ path =
    Gren.Kernel.FileSystem.listDirectory path


{-| Create a new directory at the given [Path](FileSystem.Path#Path).

If `recursive` is `True`, then a directory will be created for every section of the
given [Path](FileSystem.Path#Path).
-}
makeDirectory : Permission -> { recursive : Bool } -> Path -> Task Error Path
makeDirectory _ options path =
    Gren.Kernel.FileSystem.makeDirectory options path


{-| Create a directory, prefixed by a given name, that ends up in a section of the
file system reserved for temporary files. You're given the [Path](FileSystem.Path#Path)
to this new directory.
-}
makeTempDirectory : Permission -> String -> Task Error Path
makeTempDirectory _ prefix =
    Gren.Kernel.FileSystem.mkdtemp prefix


-- LINKS


{-| Creates a hard link from the last [Path](FileSystem.Path#Path) to
the first.

A hard link is an alias for a specific location. The link has the same
ownership and access permissions, and it's impossible to tell which is
the "real" entity and which is the link.
-}
hardLink : Permission -> Path -> Path -> Task Error Path
hardLink _ dest src =
    Gren.Kernel.FileSystem.link src dest


{-| Creates a soft link from the last [Path](FileSystem.Path#Path) to
the first.

A soft link, also known as a symoblic link or symlink, is a special file
that contains the path to some other location. Resolving a soft link will
redirect to this other location.
-}
softLink : Permission -> Path -> Path -> Task Error Path
softLink _ dest src =
    Gren.Kernel.FileSystem.symlink src dest


{-| Returns the [Path](FileSystem.Path#Path) pointed to by a soft link.
-}
readLink : Permission -> Path -> Task Error Path
readLink _ path =
    Gren.Kernel.FileSystem.readLink path


{-| Removes a link, hard or soft, from the file system. If the
[Path](FileSystem.Path#Path) refers to a file, the file is removed.
-}
unlink : Permission -> Path -> Task Error Path
unlink _ path =
    Gren.Kernel.FileSystem.unlink path


-- SUBSCRIPTION


type FileSystemSub msg
    = Watch { path : Path, recursive : Bool, msgMap : (WatchEvent -> msg) }


{-| Represents a change within a watched directory.

* `Changed` means that the contents of a file has changed in some way.
* `Moved` means that an entity has been added or removed. A rename is usually two `Moved` events.

On most operating systems, each event will be associated with a [Path](FileSystem.Path#Path)
relative to the watched directory, but some operating systems will not provide that information.
-}
type WatchEvent
    = Changed (Maybe Path)
    | Moved (Maybe Path)


subMap : (a -> b) -> FileSystemSub a -> FileSystemSub b
subMap mapFn sub =
    when sub is
        Watch { path, recursive, msgMap } ->
            Watch { path = path, recursive = recursive, msgMap = (mapFn << msgMap) }


{-| This notifies your application every time there is a change within the directory
represented by the given [Path](FileSystem.Path#Path).
-}
watch : Permission -> (WatchEvent -> msg) -> Path -> Sub msg
watch _ msgMap path =
    subscription (Watch { path = path, recursive = False, msgMap = msgMap })

{-| Same as [watch](#watch), but this will also watch for changes in sub-directories.
-}
watchRecursive : Permission -> (WatchEvent -> msg) -> Path -> Sub msg
watchRecursive _ msgMap path =
    subscription (Watch { path = path, recursive = True, msgMap = msgMap })


-- LOOP


type alias State msg =
    { watchers : Dict String (Taggers msg)
    , recursiveWatchers : Dict String (Taggers msg)
    , processes : Dict String Process.Id
    }


type alias Taggers msg =
    Array (WatchEvent -> msg)


init : Task Never (State msg)
init =
    Task.succeed
        { watchers = Dict.empty
        , recursiveWatchers = Dict.empty
        , processes = Dict.empty
        }


onEffects
    : Platform.Router msg SelfMsg
    -> Array (FileSystemSub msg)
    -> State msg
    -> Task.Task Never (State msg)
onEffects router subs state =
    let
        newWatchers =
            subs
                |> Array.keepIf (\(Watch { recursive }) -> not recursive)
                |> Array.foldl subToWatcher Dict.empty

        newRecursiveWatchers =
            subs
                |> Array.keepIf (\(Watch { recursive }) -> recursive)
                |> Array.foldl subToWatcher Dict.empty

        toSpawn =
            Dict.diff newWatchers state.watchers
                |> Dict.keys
        
        recursiveToSpawn =
            Dict.diff newRecursiveWatchers state.recursiveWatchers
                |> Dict.keys
        
        toStop =
            Dict.diff state.watchers newWatchers
                |> Dict.keys
        
        recursiveToStop =
            Dict.diff state.recursiveWatchers newRecursiveWatchers
                |> Dict.keys

        asRecursiveKey key =
            key ++ "$recursive"

        flipFold fn array initial =
            Array.foldl fn initial array

        taskStopper keyMapper =
            (\key accTask ->
                Task.andThen 
                    (\processes ->
                        let
                            realKey = 
                                keyMapper key
                        in
                        when Dict.get realKey processes is
                            Just processId ->
                                Process.kill processId
                                    |> Task.map (\_ -> Dict.remove realKey processes)

                            Nothing ->
                                accTask
                    )
                    accTask
            )

        taskSpawner keyMapper isRecursive =
            (\key accTask ->
                accTask
                    |> Task.andThen 
                        (\processes ->
                            Process.spawn (attachWatcher key isRecursive (\event -> Platform.sendToSelf router <| WatchPathChange { recursive = isRecursive, key = key, event = event }))
                                |> Task.map (\id -> Dict.set (keyMapper key) id processes)
                        )
            )
    in
    Array.foldl 
        (taskStopper identity)
        (Task.succeed state.processes)
        toStop
    |> flipFold (taskStopper asRecursiveKey) recursiveToStop
    |> flipFold (taskSpawner identity False) toSpawn
    |> flipFold (taskSpawner asRecursiveKey True) recursiveToSpawn
    |> Task.map
        (\newProcesses ->
            { watchers = newWatchers
            , recursiveWatchers = newRecursiveWatchers
            , processes = newProcesses
            }
        )


subToWatcher : FileSystemSub msg -> Dict String (Taggers msg) -> Dict String (Taggers msg)
subToWatcher sub taggers =
    when sub is
        Watch { path, msgMap = tagger } ->
            let
                key =
                    Gren.Kernel.FilePath.toString path
            in
            when Dict.get key taggers is
                Just data ->
                    Dict.set 
                        key
                        (Array.pushLast tagger data)
                        taggers

                Nothing ->
                    Dict.set key [ tagger ] taggers


attachWatcher : String -> Bool -> (WatchEvent -> Task.Task Never {}) -> Task.Task x {}
attachWatcher =
  Gren.Kernel.FileSystem.watch


type SelfMsg
    = WatchPathChange { recursive : Bool, key : String, event : WatchEvent }


onSelfMsg : Platform.Router msg SelfMsg -> SelfMsg -> State msg -> Task.Task Never (State msg)
onSelfMsg router (WatchPathChange { recursive, key, event }) state =
    let
        notifyApplication taggers =
            Array.foldl 
                (\tagger tasks -> 
                    tasks
                        |> Task.andThen (\{} -> Platform.sendToApp router (tagger event))
                )
                (Task.succeed {})
                taggers
                |> Task.map (\{} -> state)
    in
    if recursive then
        when Dict.get key state.recursiveWatchers is
            Just taggers ->
                notifyApplication taggers

            Nothing ->
                Task.succeed state

    else
        when Dict.get key state.watchers is
            Just taggers ->
                notifyApplication taggers

            Nothing ->
                Task.succeed state


-- SPECIAL PATHS


{-| Find the [Path](FileSystem.Path#Path) that represents the home directory of the current user.
-}
homeDirectory : Permission -> Task x Path
homeDirectory _ =
    Gren.Kernel.FileSystem.homeDir


{-| Returns the current working directory of the program.

This is the directory that all relative paths are relative to, and is usually the
directory that the program was executed from.
-}
currentWorkingDirectory : Permission -> Task x Path
currentWorkingDirectory _ =
    Gren.Kernel.FileSystem.currentWorkingDirectory


{-| Find a [Path](FileSystem.Path#Path) that represents a directory meant to hold temporary files.
-}
tmpDirectory : Permission -> Task x Path
tmpDirectory _ =
    Gren.Kernel.FileSystem.tmpDir


{-| [Path](FileSystem.Path#Path) to a file which is always empty. Anything written to this file will be discarded.
-}
devNull : Permission -> Task x Path
devNull _ =
    Gren.Kernel.FileSystem.devNull
